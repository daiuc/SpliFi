'''
Use leafcutter2 to analyze splicing QTLs

Main datasets:
    1.  Geuvadis
    2.  GTEx

Notes:
    1. When running on full Geuvadis dataset, make sure to modify accordingly in
       these rules:
        - `Geuvadis_Linked_SampleIDs` in `common.smk`
        - `prep_genotype` in `qtl.smk`

'''

__author__ = "Chao Dai"
__email__ = "chaodai@uchicago.edu"

import pandas as pd

configfile: "config/config.yaml"

AUTOSOMES = ['chr'+str(i) for i in range(1,23)]
CHROMS = AUTOSOMES + ['chrX', 'chrY']


# remove white space and fix parentethies in tissue name
fixChr = str.maketrans({" ": None, "(": "_", ")": "_"})

# Geuvadis metadata lookup table, key cols are Population ID, Sample ID, Run ID
Geuvadis_Metadata = pd.read_csv(config['Dataset']['Geuvadis']['Metadata'], sep='\t')
Geuvadis_Metadata.set_index(['Pop_id', 'Sample', 'run_id'], drop=False, inplace=True)

# GTEx metadata for all samples present in the junction file
Gtex_Metadata = pd.read_csv(config['Dataset']['GTEx']['Junc_meta'], sep='\t')
Gtex_Metadata[['SMTS', 'SMTSD']] = Gtex_Metadata[['SMTS', 'SMTSD']].apply(lambda x: x.str.translate(fixChr))
Gtex_Metadata.set_index(['SAMPID', 'SMTS', 'SMTSD', 'SUBJID'], drop=False, inplace=True)


# Get Geuvadis samples that have genotype in 1KGP
# For now, use only samples with 1-to-1 Sample-to-ERR
# For production, use the full linked samples
Geuvadis_Linked_SampleIDs = []
with open(config['Dataset']['Geuvadis']['Linked_1to1_SampleIDs']) as f:
    Geuvadis_Linked_SampleIDs = [s.strip() for s in f.readlines()]

def getERR(sample_id, lookup_df):
    ERR = lookup_df.query('Sample == @sample_id').run_id
    return list(set(ERR))

# Dict of Geuvadis sample ID to ERR ID
Sample_ERR_Dict = dict(zip(Geuvadis_Linked_SampleIDs, [getERR(x, Geuvadis_Metadata) for x in Geuvadis_Linked_SampleIDs]))





wildcard_constraints:
    datasource = "Geuvadis|GTEx",
    population = "CEU|FIN|GBR|TSI|YRI|EUR",
    geuvadis_sid = "[A-Z]{2}[0-9]{5,6}",
    chrom = "chr[0-9]{1,2}",
    window = "[0-9]+",
    phenType = "combineNoise|separateNoise",
    # group = "[^\/]+", # rule out e.g. `Bladder/by_intron`


# pull GTEX BedGraph files
GTEX_BEDGRAPH_TISSUES = {
        'Brain-Anteriorcingulatecortex_BA24_': 'Brain_Anterior_cingulate_cortex_BA24',
        'Brain-Cortex': 'Brain_Cortex',
        'Brain-FrontalCortex_BA9_': 'Brain_Frontal_Cortex_BA9',
        'Brain-Putamen_basalganglia_': 'Brain_Putamen_basal_ganglia',
        'Heart-AtrialAppendage': 'Heart_Atrial_Appendage',
        'Liver': 'Liver',
        'Lung': 'Lung',
        'Muscle-Skeletal': 'Muscle_Skeletal',
        'Skin-NotSunExposed_Suprapubic_': 'Skin_Not_Sun_Exposed_Suprapubic',
        'WholeBlood': 'Whole_Blood'
    }



include: 'rules/gtex.smk'
include: 'rules/geuvadis.smk'
include: 'rules/qtl.smk'
# include: 'rules/rna.smk'
# include: 'rules/qtlQC.smk'
# include: "rules/other.smk"





# Tissues with multiple sub tissues types, names are sub-tissue type names
# include Kidney-Cortex
GtexMultiSubTissues = 'Adipose-Subcutaneous,Adipose-Visceral(Omentum),WholeBlood,Cells-EBV-transformedlymphocytes,Artery-Tibial,Artery-Aorta,Artery-Coronary,Brain-Cortex,Brain-Caudate(basalganglia),Brain-Nucleusaccumbens(basalganglia),Brain-Cerebellum,Brain-CerebellarHemisphere,Brain-FrontalCortex(BA9),Brain-Putamen(basalganglia),Brain-Hypothalamus,Brain-Hippocampus,Brain-Anteriorcingulatecortex(BA24),Brain-Spinalcord(cervicalc-1),Brain-Amygdala,Brain-Substantianigra,Colon-Transverse,Colon-Sigmoid,Esophagus-Mucosa,Esophagus-Muscularis,Esophagus-GastroesophagealJunction,Heart-LeftVentricle,Heart-AtrialAppendage,Kidney-Cortex,Skin-SunExposed(Lowerleg),Skin-NotSunExposed(Suprapubic),Cells-Culturedfibroblasts'
# not include Kidney-Cortex
# GtexMultiSubTissues = 'Adipose-Subcutaneous,Adipose-Visceral(Omentum),WholeBlood,Cells-EBV-transformedlymphocytes,Artery-Tibial,Artery-Aorta,Artery-Coronary,Brain-Cortex,Brain-Caudate(basalganglia),Brain-Nucleusaccumbens(basalganglia),Brain-Cerebellum,Brain-CerebellarHemisphere,Brain-FrontalCortex(BA9),Brain-Putamen(basalganglia),Brain-Hypothalamus,Brain-Hippocampus,Brain-Anteriorcingulatecortex(BA24),Brain-Spinalcord(cervicalc-1),Brain-Amygdala,Brain-Substantianigra,Colon-Transverse,Colon-Sigmoid,Esophagus-Mucosa,Esophagus-Muscularis,Esophagus-GastroesophagealJunction,Heart-LeftVentricle,Heart-AtrialAppendage,Skin-SunExposed(Lowerleg),Skin-NotSunExposed(Suprapubic),Cells-Culturedfibroblasts'
# Tissues with only 1 sub tissue type, names are main tissue type names
# GtexSingleSubTissues = 'Adipose-Subcutaneous,Adipose-Visceral(Omentum),Artery-Aorta,Artery-Coronary,Artery-Tibial,Brain-Amygdala,Brain-Anteriorcingulatecortex(BA24),Brain-Caudate(basalganglia),Brain-CerebellarHemisphere,Brain-Cerebellum,Brain-Cortex,Brain-FrontalCortex(BA9),Brain-Hippocampus,Brain-Hypothalamus,Brain-Nucleusaccumbens(basalganglia),Brain-Putamen(basalganglia),Brain-Spinalcord(cervicalc-1),Brain-Substantianigra,Cells-Culturedfibroblasts,Cells-EBV-transformedlymphocytes,Colon-Sigmoid,Colon-Transverse,Esophagus-GastroesophagealJunction,Esophagus-Mucosa,Esophagus-Muscularis,Heart-AtrialAppendage,Heart-LeftVentricle,Skin-NotSunExposed(Suprapubic),Skin-SunExposed(Lowerleg),WholeBlood,Bladder'
GtexSingleSubTissues = 'Muscle-Skeletal,Thyroid,Nerve-Tibial,Lung,Breast-MammaryTissue,Testis,Stomach,Pancreas,Pituitary,AdrenalGland,Prostate,Spleen,Liver,SmallIntestine-TerminalIleum,Ovary,MinorSalivaryGland,Vagina,Uterus,Bladder'
GtexOutputSubTissues = GtexSingleSubTissues + ',' + GtexMultiSubTissues
GtexOutputSubTissues = GtexOutputSubTissues.translate(fixChr)





#-------------------------------------------------------------------------------

localrules: all, SplitGTExSampleIDList, RenameJuncFilesGtex

rule all:
    input:
        # Geuvadis EUR
        # run leafcutter 2 without constitutive junctions
        # expand('results/pheno/noisy/Geuvadis/{POP}/leafcutter_perind.counts.noise_by_intron.gz', POP=['EUR']),
        # run leafcutter 2 with constitutive junctions
        # expand('results/pheno/noisy/Geuvadis/{POP}/wConst_perind.constcounts.noise_by_intron.gz', POP=['EUR']),
        # add q value to qtltools result
        # expand('results/qtl/noisy/Geuvadis/{POP}/{PTYPE}/cis_{WSIZE}/perm/{CHR}.addQval.txt.gz',
        #         POP=['EUR'], PTYPE=['separateNoise'], WSIZE=[100000], CHR=AUTOSOMES),
        # 
        # 49 GTEx tissues
        # rename junction files to enable differential splicing
        expand('resources/GTEx/juncs/all49tissues/{tissue}.done', tissue=GtexOutputSubTissues.split(',')),
        # run leafcutter 2 without constitutive junctions
        expand('results/pheno/noisy/GTEx/{TISSUE}/leafcutter_perind.counts.noise_by_intron.gz', TISSUE=GtexOutputSubTissues.split(',')),
        # run leafcutter 2 with constitutive junctions
        expand('results/pheno/noisy/GTEx/{TISSUE}/wConst_perind.constcounts.noise_by_intron.gz',
                TISSUE=GtexOutputSubTissues.split(',')),
        # add q value to qtltools result
        # expand('results/qtl/noisy/GTEx/{TISSUE}/{PTYPE}/cis_{WSIZE}/perm/{CHR}.addQval.txt.gz',
        #         TISSUE=GtexOutputSubTissues.split(','), PTYPE=['separateNoise'],
        #         WSIZE=[100000], CHR=AUTOSOMES), # not using PTYPE='combineNoise'
        # extract gene expression from GTEx tpm file
        expand('resources/GTEx/expression/{TISSUE}_gene_tpm.tsv.gz', TISSUE=GtexOutputSubTissues.split(',')),
        # pull GTEX BedGraph files and conver to bigwig
        expand('resources/GTEx/BigWig/{TSOG}/done', TSOG=list(GTEX_BEDGRAPH_TISSUES.keys())),




