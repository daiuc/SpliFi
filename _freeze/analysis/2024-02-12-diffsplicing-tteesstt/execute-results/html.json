{
  "hash": "5bf3fc061880e2bb8ecf02ec0060cab4",
  "result": {
    "markdown": "---\ntitle: test differential splicing script\ndate: 2024-2-12\nauthor: Chao Dai\ncode-fold: true\nexecute:\n  warning: false\n  message: false\n  echo: false\n  include: false\ncategories:\n  - GTEx\n  - Differential splicing\n---\n\n\n\n\n\n\n\n# Introduction\n\nThis is used to test whether the differential splicing script \n`/project2/yangili1/cdai/SpliFi/code/workflow/submodules/leafcutter/scripts/leafcutter_ds.R`\nis working correctly.\n\nTo test, I chose 200 samples from Brain-Cerebellum from GTEx, and arbitrarily assigned the first 100 to group 1 and the second 100 to group 2. I then ran the script to test for differential splicing between the two groups.\n\n\nDetailed snakemake rules here: \n```\nrule adhoc_test_ds_step1: # testing differential splicing with neg control\n    input: \n        ds_numers_lf1 = 'results/ds/GTEx/Brain-Cerebellum_v_Liver/ds_perind_numers.counts.noise_by_intron.lf1.gz',\n    output:\n        neg_control_numers = 'results/ds/GTEx/ds_test/BC_v_Liver/perind.numers.gz',\n        neg_control_groups = 'results/ds/GTEx/ds_test/BC_v_Liver/sample_group.txt'\n    run:\n        import gzip\n        outf1 = gzip.open(output.neg_control_numers, 'wt')\n        outf2 = open(output.neg_control_groups, 'w')\n        with gzip.open(input.ds_numers_lf1, 'rt') as f:\n            i = 0\n            for ln in f:\n                if i == 0:\n                    header = ln.split()\n                    cols = ([x.replace('Brain-Cerebellum', 'BC-group1') for x in header[0:100]] +\n                            [x.replace('Brain-Cerebellum', 'BC-group2') for x in header[100:200]])\n                    groups = ['BC-group1' for x in header[0:100]] + ['BC-group2' for x in header[100:200]]\n                    for c,g in zip(cols, groups):\n                        outf2.write(f'{c} {g}\\n')\n                    outf1.write(' '.join(cols) + '\\n')\n                if i > 0:\n                    outln = ln.split()[:201]\n                    outf1.write(' '.join(outln) + '\\n')\n                i += 1\n\n        outf1.close()\n        outf2.close()\n\n\nuse rule RunLeafcutterDiffSplicingGtex as adhoc_test_ds_step2 with:\n    input:\n        ds_numers_lf1 = 'results/ds/GTEx/ds_test/BC_v_Liver/perind.numers.gz',\n        ds_sample_group = 'results/ds/GTEx/ds_test/BC_v_Liver/sample_group.txt'\n    output:\n        flag = touch('results/ds/GTEx/ds_test/BC_v_Liver/ds.done')\n        # produces two files:\n        # 1. {outprefix}_effect_sizes.txt\n        # 2. {outprefix}_manual_ds_cluster_significance.txt\n    params:\n        Rscript = 'workflow/submodules/leafcutter/scripts/leafcutter_ds.R', \n        outprefix = 'results/ds/GTEx/ds_test/BC_v_Liver/ds', # note you need to include path!\n        MIN_SAMPLES_PER_INTRON = 5,\n        MIN_SAMPLES_PER_GROUP = 3,\n        MIN_COVERAGE = 5\n    log: 'results/ds/GTEx/ds_test/BC_v_Liver/log'\n\n```\n\n\n# Results\n\n\n## Conclusion\n1567 introns (4%) passed FDR<0.05 threshold.\n\n\nLoad result in \n- `results/ds/GTEx/ds_test/BC_v_Liver`\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "2024-02-12-diffsplicing-tteesstt_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}